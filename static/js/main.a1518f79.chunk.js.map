{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1518f79.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textPrimary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textPrimary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{cases}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport { \n  MenuItem,\n  FormControl,\n  Select,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport './App.css';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]); \n  const [country, setCountry] = useState('worldwide'); //I am using worldwide as default on select\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = \n  useState({ lat:34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  },[])\n\n\n  //USEEFFECT = Runs a piece of code based on given condition\n  useEffect(() =>{\n    //This bascically runs code only once when the component loads\n    //Async = Send Request, wait for it\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) =>{\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }\n        ));\n        \n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    // Use the country codes derived from disease.sh\n    const url = countryCode === \"worldwide\"  \n    ? \"https://disease.sh/v3/covid-19/all\" \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n\n      // Storing all of the data from the country response\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  };\n\n  console.log('Country info>>>',countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              \n              <MenuItem value=\"worldwide\">Worldwide</MenuItem> \n              {countries.map((country) =>(\n                <MenuItem value={country.value}>{country.name}</MenuItem> //Loop through contries\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        \n        <div className=\"app__stats\">\n          <InfoBox \n          isRed\n            active={casesType === \"cases\"}\n            onClick={e=> setCasesType('cases')}\n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={e=> setCasesType('recovered')}\n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox\n          isRed \n            active={casesType === \"deaths\"}\n            onClick={e=> setCasesType('deaths')}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n  \n        <Map \n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n            <h3 className=\"app__graphtitle\">Worldwide New {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}